"use strict";export class Stack{constructor(t=[]){this.items=t instanceof Array?t:[]}push(t){this.items.push(t)}pop(){return this.items.pop()}size(){return this.items.length}isEmpty(){return 0===this.size()}clear(){this.items=[]}}export class Queue{constructor(t=[]){this.items=t instanceof Array?Object.assign({},t):{},this.head=0,this.tail=0}enq(t){this.items[this.tail]=t,this.tail++}deq(){const t=this.items[this.head];return delete this.items[this.head],this.head++,t}size(){return this.tail-this.head}isEmpty(){return 0===this.size()}clear(){this.items={},this.head=0,this.tail=0}}export class Deque{constructor(t=[]){this.items=t instanceof Array?Object.assign({},t):{},this.head=0,this.tail=0}enqHead(t){this.head--,this.items[this.head]=t}enqTail(t){this.items[this.tail]=t,this.tail++}deqHead(){const t=this.items[this.head];return delete this.items[this.head],this.head++,t}deqTail(){this.tail--;let t=this.items[this.tail];return delete this.items[this.tail],t}size(){return this.tail-this.head}isEmpty(){return 0===this.size()}clear(){this.items={},this.head=0,this.tail=0}}export class Vector2D{constructor(t,s){this.x=t,this.y=s}add(t){return new Vector2D(this.x+t.x,this.y+t.y)}sub(t){return new Vector2D(this.x-t.x,this.y-t.y)}mul(t){return new Vector2D(this.x*t,this.y*t)}div(t){return new Vector2D(this.x/t,this.y/t)}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}abs(){return Math.sqrt(this.dot(this))}distance(t){return this.sub(t).abs()}normalize(){return this.div(this.abs())}rotate(t){const s=this.x,i=this.y,e=Math.cos(t),h=Math.sin(t);return new Vector2D(e*s-h*i,h*s+e*i)}lt(t){return this.x===t.x?this.y<t.y:this.x<t.x}gt(t){return t.lt(this)}le(t){return!this.gt(t)}ge(t){return!this.lt(t)}eq(t){return this.ge(t)&&this.le(t)}ne(t){return!this.eq(t)}}